color <- "mutation"
}
return (list("databox"=data_box, "color" = color))
})
output$TargetExpre<- renderPlot({
data_box<- data_box()$databox
color <- data_box()$color
maxy <- max(data_box$value)
ggplot(data_box, aes_string(x = "variable",
y = "value", fill = color)) +
geom_boxplot() +
scale_fill_brewer(palette="RdBu")+
stat_compare_means(
# group.by = color,
aes_string(group = color),
label = "p.signif", label.y = maxy) +
stat_summary(fun.data = give.n, geom = "text",
position = position_dodge(width = 0.75)) +
labs(x = "Genes", y = "RNA expression") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size = 11 ),
axis.title = element_text(size = 12),
legend.text = element_text(size = 11)
)
})
output$Distribution<- renderPlot({
data_box<- data_box()$databox
category <- data_box()$color
data_bar <- as.data.frame(table(data_box[category]))
names(data_bar) <- c("Category", "Sample Numbers")
barplot <- ggbarplot(data_bar,x = "Category", y = "Sample Numbers",
fill = "Category", palette = brewer.pal(n = 8
, name = "RdBu"),
label = TRUE, legend = "right")+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size = 11,
angle = 90),
axis.title = element_text(size = 12),
legend.text = element_text(size = 11)
)
# stat_summary(fun.data = give.n.bar, geom = "text",
#              position = position_dodge(width = 0.75))
barplot
})
}
options(shiny.reactlog=TRUE)
# Run the application
shinyApp(ui = ui, server = server)
length(data.anno)
length(data)
unique(data.anno$sample_type)
unique(data.anno$Sample_type)
table(data.anno$Sample_type)
ui <- fluidPage(
# Application title
titlePanel(
p(h1("Acute Myloid lymphoma data visualization"),
h3("Data description:",
style = "font-family: 'arial'; font-size: 20px"),
h3("Microarray Bulk RNA-Seq data of bone marrow & PBMCs
samples from 682 AML patients and 74 healthy donors",
style = "font-family: 'arial'; font-size: 20px"))
),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(width = 3,
fluidRow(
column(10, selectInput("sample_origin",
h3("SAMPLE ORIGIN",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("all", "bone marrow", "peripheral blood"),
selected = "all",
)
),
column(10, selectizeInput("genes",
h3("GENE SELECTION",
style = "font-family: 'arial'; font-size: 20px"),
options = list(placeholder = 'Please select up to 5 genes',
maxOptions = 5)
,
choices = NULL,
multiple = TRUE)
),
column(10, selectInput("metadata",
h3("VISUALIZE DATA BY METADATA",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("FAB score", "tumor type",
"mutations"),
))
),
),
# Show a plot of the generated distribution
mainPanel(
h1("", align="center",
style = "font-family: 'times'; font-si16pt"),
fluidRow(
plotOutput("TargetExpre",
width = "95%",
height = "400px"
)
),
fluidRow(
plotOutput("Distribution",
width = "90%",
height = "300px")
)
)
)
ui <- fluidPage(
# Application title
titlePanel(
p(h1("Acute Myloid lymphoma data visualization"),
h3("Data description:",
style = "font-family: 'arial'; font-size: 20px"),
h3("Microarray Bulk RNA-Seq data of bone marrow & PBMCs
samples from 682 AML patients and 74 healthy donors",
style = "font-family: 'arial'; font-size: 20px"))
),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(width = 3,
fluidRow(
column(10, selectInput("sample_origin",
h3("SAMPLE ORIGIN",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("all", "bone marrow", "peripheral blood"),
selected = "all",
)
),
column(10, selectizeInput("genes",
h3("GENE SELECTION",
style = "font-family: 'arial'; font-size: 20px"),
options = list(placeholder = 'Please select up to 5 genes',
maxOptions = 5)
,
choices = NULL,
multiple = TRUE)
),
column(10, selectInput("metadata",
h3("VISUALIZE DATA BY METADATA",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("FAB score", "tumor type",
"mutations"),
))
),
),
# Show a plot of the generated distribution
mainPanel(
h1("", align="center",
style = "font-family: 'times'; font-si16pt"),
fluidRow(
plotOutput("TargetExpre",
width = "95%",
height = "400px"
)
),
fluidRow(
plotOutput("Distribution",
width = "90%",
height = "300px")
)
)
)
ui <- fluidPage(
# Application title
titlePanel(
p(h1("Acute Myloid lymphoma data visualization"),
h3("Data description:",
style = "font-family: 'arial'; font-size: 20px"),
h3("Microarray Bulk RNA-Seq data of bone marrow & PBMCs
samples from 682 AML patients and 74 healthy donors",
style = "font-family: 'arial'; font-size: 20px"))
),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(width = 3,
fluidRow(
column(10, selectInput("sample_origin",
h3("SAMPLE ORIGIN",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("all", "bone marrow", "peripheral blood"),
selected = "all",
)
),
column(10, selectizeInput("genes",
h3("GENE SELECTION",
style = "font-family: 'arial'; font-size: 20px"),
options = list(placeholder = 'Please select up to 5 genes',
maxOptions = 5)
,
choices = NULL,
multiple = TRUE)
),
column(10, selectInput("metadata",
h3("VISUALIZE DATA BY METADATA",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("FAB score", "tumor type",
"mutations"),
))
),
),
# Show a plot of the generated distribution
mainPanel(
h1("", align="center",
style = "font-family: 'times'; font-si16pt"),
fluidRow(
plotOutput("TargetExpre",
width = "95%",
height = "400px"
)
),
fluidRow(
plotOutput("Distribution",
width = "90%",
height = "300px")
)
)
)
# ?mainPanel
# Define server logic required to draw a histogram
server <- function(input, output, session) {
updateSelectizeInput(session, 'genes', choices = data.gene,
selected = c("CD70"), server = TRUE,
options = list(render = I(
'{
option: function(item, escape) {
return "<div>" + escape(item.value) + "</div>";
}
}'
)))
# browser()
data_box <- reactive({
if (input$sample_origin!="all"){
data.anno <- filter(data.anno, Sample_tissue_of_origin == input$sample_origin)
data <- data[,rownames(data.anno)]
}else{
data.anno <- data.anno
data <- data
}
data_gene <- as.data.frame(t(data[rownames(data) %in% input$genes, ]))
if(input$metadata == "tumor type"){
data_gene_type <- data_gene %>% add_column(sample_type = data.anno$Sample_type)
data_box <- data_gene_type %>%
melt(id.vars = c("sample_type")) %>%
filter(variable %in% input$genes) %>% droplevels()
color <- "sample_type"}
else if(input$metadata == "FAB score"){
# browser()
data_gene_type <- data_gene%>% add_column(FAB_score = data.anno$FAB_score)
data_box <- data_gene_type %>%
melt(id.vars = c("FAB_score")) %>%
filter(variable %in% input$genes) %>% droplevels()
color <- "FAB_score"
}
else if(input$metadata == "mutations"){
data_gene_type <- data_gene %>% add_column(mutation = data.anno$mutation_status)
data_box <- data_gene_type %>%
melt(id.vars = c("mutation")) %>%
filter(variable %in% input$genes) %>% droplevels()
color <- "mutation"
}
return (list("databox"=data_box, "color" = color))
})
output$TargetExpre<- renderPlot({
data_box<- data_box()$databox
color <- data_box()$color
maxy <- max(data_box$value)
ggplot(data_box, aes_string(x = "variable",
y = "value", fill = color)) +
geom_boxplot() +
scale_fill_brewer(palette="RdBu")+
stat_compare_means(
# group.by = color,
aes_string(group = color),
label = "p.signif", label.y = maxy) +
stat_summary(fun.data = give.n, geom = "text",
position = position_dodge(width = 0.75)) +
labs(x = "Genes", y = "RNA expression") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size = 11 ),
axis.title = element_text(size = 12),
legend.text = element_text(size = 11)
)
})
output$Distribution<- renderPlot({
data_box<- data_box()$databox
category <- data_box()$color
data_bar <- as.data.frame(table(data_box[category]))
names(data_bar) <- c("Category", "Sample Numbers")
barplot <- ggbarplot(data_bar,x = "Category", y = "Sample Numbers",
fill = "Category", palette = brewer.pal(n = 8
, name = "RdBu"),
label = TRUE, legend = "right")+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size = 11,
angle = 90),
axis.title = element_text(size = 12),
legend.text = element_text(size = 11)
)
# stat_summary(fun.data = give.n.bar, geom = "text",
#              position = position_dodge(width = 0.75))
barplot
})
}
ui <- fluidPage(
# Application title
titlePanel(
p(h1("Acute Myloid lymphoma data visualization"),
h3("Data description:",
style = "font-family: 'arial'; font-size: 20px"),
h3("Microarray Bulk RNA-Seq data of bone marrow & PBMCs
samples from 682 AML patients and 74 healthy donors",
style = "font-family: 'arial'; font-size: 20px"))
),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(width = 3,
fluidRow(
column(10, selectInput("sample_origin",
h3("SAMPLE ORIGIN",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("all", "bone marrow", "peripheral blood"),
selected = "all",
)
),
column(10, selectizeInput("genes",
h3("GENE SELECTION",
style = "font-family: 'arial'; font-size: 20px"),
options = list(placeholder = 'Please select up to 5 genes',
maxOptions = 5)
,
choices = NULL,
multiple = TRUE)
),
column(10, selectInput("metadata",
h3("VISUALIZE DATA BY METADATA",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("FAB score", "tumor type",
"mutations"),
))
),
),
# Show a plot of the generated distribution
mainPanel(
h1("", align="center",
style = "font-family: 'times'; font-si16pt"),
fluidRow(
plotOutput("TargetExpre",
width = "95%",
height = "400px"
)
),
fluidRow(
plotOutput("Distribution",
width = "90%",
height = "300px")
)
)
)
ui <- fluidPage(
# Application title
titlePanel(
p(
h1("Acute Myloid lymphoma data visualization"),
h3("Data description:", style = "font-family: 'arial'; font-size: 20px"),
h3("Microarray Bulk RNA-Seq data of bone marrow & PBMCs samples from 682 AML patients and 74 healthy donors",
style = "font-family: 'arial'; font-size: 20px")
)
),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(width = 3,
fluidRow(
column(10, selectInput("sample_origin",
h3("SAMPLE ORIGIN",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("all", "bone marrow", "peripheral blood"),
selected = "all",
)
),
column(10, selectizeInput("genes",
h3("GENE SELECTION",
style = "font-family: 'arial'; font-size: 20px"),
options = list(placeholder = 'Please select up to 5 genes',
maxOptions = 5)
,
choices = NULL,
multiple = TRUE)
),
column(10, selectInput("metadata",
h3("VISUALIZE DATA BY METADATA",
style = "font-family: 'arial'; font-size: 20px"),
choices = c("FAB score", "tumor type",
"mutations"),
))
),
),
# Show a plot of the generated distribution
mainPanel(
h1("", align="center",
style = "font-family: 'times'; font-si16pt"),
fluidRow(
plotOutput("TargetExpre",
width = "95%",
height = "400px"
)
),
fluidRow(
plotOutput("Distribution",
width = "90%",
height = "300px")
)
)
)
)
# ?mainPanel
# Define server logic required to draw a histogram
server <- function(input, output, session) {
updateSelectizeInput(session, 'genes', choices = data.gene,
selected = c("CD70"), server = TRUE,
options = list(render = I(
'{
option: function(item, escape) {
return "<div>" + escape(item.value) + "</div>";
}
}'
)))
# browser()
data_box <- reactive({
if (input$sample_origin!="all"){
data.anno <- filter(data.anno, Sample_tissue_of_origin == input$sample_origin)
data <- data[,rownames(data.anno)]
}else{
data.anno <- data.anno
data <- data
}
data_gene <- as.data.frame(t(data[rownames(data) %in% input$genes, ]))
if(input$metadata == "tumor type"){
data_gene_type <- data_gene %>% add_column(sample_type = data.anno$Sample_type)
data_box <- data_gene_type %>%
melt(id.vars = c("sample_type")) %>%
filter(variable %in% input$genes) %>% droplevels()
color <- "sample_type"}
else if(input$metadata == "FAB score"){
# browser()
data_gene_type <- data_gene%>% add_column(FAB_score = data.anno$FAB_score)
data_box <- data_gene_type %>%
melt(id.vars = c("FAB_score")) %>%
filter(variable %in% input$genes) %>% droplevels()
color <- "FAB_score"
}
else if(input$metadata == "mutations"){
data_gene_type <- data_gene %>% add_column(mutation = data.anno$mutation_status)
data_box <- data_gene_type %>%
melt(id.vars = c("mutation")) %>%
filter(variable %in% input$genes) %>% droplevels()
color <- "mutation"
}
return (list("databox"=data_box, "color" = color))
})
output$TargetExpre<- renderPlot({
data_box<- data_box()$databox
color <- data_box()$color
maxy <- max(data_box$value)
ggplot(data_box, aes_string(x = "variable",
y = "value", fill = color)) +
geom_boxplot() +
scale_fill_brewer(palette="RdBu")+
stat_compare_means(
# group.by = color,
aes_string(group = color),
label = "p.signif", label.y = maxy) +
stat_summary(fun.data = give.n, geom = "text",
position = position_dodge(width = 0.75)) +
labs(x = "Genes", y = "RNA expression") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size = 11 ),
axis.title = element_text(size = 12),
legend.text = element_text(size = 11)
)
})
output$Distribution<- renderPlot({
data_box<- data_box()$databox
category <- data_box()$color
data_bar <- as.data.frame(table(data_box[category]))
names(data_bar) <- c("Category", "Sample Numbers")
barplot <- ggbarplot(data_bar,x = "Category", y = "Sample Numbers",
fill = "Category", palette = brewer.pal(n = 8
, name = "RdBu"),
label = TRUE, legend = "right")+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size = 11,
angle = 90),
axis.title = element_text(size = 12),
legend.text = element_text(size = 11)
)
# stat_summary(fun.data = give.n.bar, geom = "text",
#              position = position_dodge(width = 0.75))
barplot
})
}
options(shiny.reactlog=TRUE)
# Run the application
shinyApp(ui = ui, server = server)
source('C:/Users/jtao/work_dir/RShiny/test_with_AML_data/AML_bulk_RNAseq.R')
source('C:/Users/jtao/work_dir/RShiny/test_with_AML_data/AML_bulk_RNAseq.R')
